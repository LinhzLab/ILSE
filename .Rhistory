formula <- obj$formula
bw <- obj$inargs$bw
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
form <- terms(formula, data=data)
real_p <- ncol(data)-1
# if(attr(form,"intercept")) real_p <- real_p + 1
n <- nrow(data)
message('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
for(k in 1:repTimes)
{
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
coef.par <- ilse(formula, data1, bw, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta
res.par[k, ] <- coef.par
}
message('===================Finish bootstrapping================\n')
return(cov(res.par))
}
bootstrap.fiml <- function(obj, repTimes=100){
data <- obj$data
formula <- obj$formula
n <- nrow(data)
p <- ncol(data)
res.par <- matrix(nrow=repTimes, ncol= p)
message('===================Start bootstrapping================\n')
for(k in 1:repTimes)
{
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
try(coef.par <- fimlreg(formula, data1)$beta, silent = T)
res.par[k, ] <- coef.par
}
message('===================Finish bootstrapping================\n')
return(cov(res.par))
}
obj <- ilse1
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
form <- terms(formula, data=data)
real_p <- ncol(data)-1
n <- nrow(data)
message('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
repTimes <- 2
res.par <- matrix(nrow=repTimes, ncol=real_p)
real_p
k <- 1
# k <- 1
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
coef.par <- ilse(formula, data1, bw, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta
formula
data1
dim(data1)
bw
bw.type
if(is.null(formula)) stop('formula must be given!')
if (!inherits(formula, "formula"))
stop("method is only for formula objects")
if(!is.null(data)){
## obtain name of response variable
form <- terms(formula, data=data)
vars <- attr(form, "variables")
resp <- row.names(attr(form, "factors"))[1]
## obtain design matrix
Xmat <- model.matrix.lm(object = formula, data=data, na.action = "na.pass")
# XYdat <- model.frame(formula = formula, data = data, na.action=NULL)
XYdat <- cbind(data[[resp]], Xmat)
colnames(XYdat)[1] <- resp
data <- as.data.frame(XYdat)
}else{
## obtain name of response variable
XYdat <- model.frame(formula = formula, na.action=NULL)
p <- ncol(XYdat[[2]])
XYdat <- as.data.frame(as.matrix(XYdat))
data <- as.data.frame(XYdat)
}
np <- dim(XYdat)
XYdat <- as.matrix(XYdat)
Y <- XYdat[,1]
X <- XYdat[,-1]
n <- length(Y)
X <- matrix(X, nrow=np[1], ncol=np[2]-1)
colnames(X) <- colnames(XYdat)[2:np[2]]
cl <- match.call()
cl[[1]] <- as.name("clse")
if(!is.matrix(X)) X <- as.matrix(X)
res <- ilse.numeric(Y, X,bw=bw,  k.type=k.type, bw.type=bw.type,
K=K,method=method, ...)
X
dim(X)
dim(Y)
length(Y)
data <- data1
if(!is.null(data)){
## obtain name of response variable
form <- terms(formula, data=data)
vars <- attr(form, "variables")
resp <- row.names(attr(form, "factors"))[1]
## obtain design matrix
Xmat <- model.matrix.lm(object = formula, data=data, na.action = "na.pass")
# XYdat <- model.frame(formula = formula, data = data, na.action=NULL)
XYdat <- cbind(data[[resp]], Xmat)
colnames(XYdat)[1] <- resp
data <- as.data.frame(XYdat)
}else{
## obtain name of response variable
XYdat <- model.frame(formula = formula, na.action=NULL)
p <- ncol(XYdat[[2]])
XYdat <- as.data.frame(as.matrix(XYdat))
data <- as.data.frame(XYdat)
}
np <- dim(XYdat)
XYdat <- as.matrix(XYdat)
dim(XYdat)
data
dim(data)
dim(dat1)
dim(data1)
res <- ILSE:::ilse.numeric(Y, X,bw=bw,  k.type=k.type, bw.type=bw.type,
K=K,method=method, ...)
res <- ILSE:::ilse.numeric(Y, X,bw=bw,  k.type=k.type, bw.type=bw.type,
K=K,method=method)
method
if (is.null(n <- nrow(X)))
stop("'X' must be a matrix")
if (n == 0L)
stop("0 (non-NA) cases")
if(!is.null(bw) && !is.numeric(bw)) stop('"bw" must be NULL or a positive scalar!')
if(!is.matrix(X)) X <- as.matrix(X)
p <- ncol(X)
i.com <- which(complete.cases(X))
Xmat0 <- X
Xmat0[is.na(X)] <- 0
Xmat0
Xmat0[is.na(X)] <- 0
Z2  <- Xmat0  # X^tilde
IDX <- indx.comp(X)
indx.comp <- ILSE:::indx.comp
IDX <- indx.comp(X)
cc.coef <- as.numeric(lm(Y~.+0, data.frame(X), subset= i.com )$coef) # complete cases' estimate as initial estimate
cc.coef
if(any(is.na(cc.coef)))  cc.coef[is.na(cc.coef)] <- 1
if(is.null(bw)) bw  <- n^(-1/3)* sd(Xmat0%*%matrix(cc.coef,p,1))
bw <- ifelse(bw >1, bw, 1)
beta <- cc.coef
Bmat <- beta
rss <- rss.old <- sqrt(sum((Y-Xmat0%*%matrix(beta,p,1))^2))
k <- 0
if(infor_output==TRUE){
message("iter=", k, ", d.fn=",NA, ", d.par=", NA, "\n")
# message("par:", format(as.vector(beta), digits = 4),'\n')
}
k <- k+1
NA_ind <- which(apply(is.na(X), 1, sum) !=0)
W <- Xmat0 %*% beta
#Z1 <- t(vapply(1:n, kern.est, FUN.VALUE=numeric(p), beta = beta, Xmat = X, Y= Y,  IDX = IDX, bw = bw, K=K, bw.type=bw.type))
#Z2[Xmat0==0] <- Z1[Xmat0==0]
Z1 <- X
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
Z2[is.na(X)] <- Z1[is.na(X)]
if (method =="Full.cond"){
xtx <- t(Z1) %*% Z2
xty <- t(Z1)%*%Y
beta.new <- solve(xtx)%*%xty
}
else if (method =="Par.cond"){
beta.new <- lm(Y~.+0, data.frame(Z2))$coef
}
Z2[is.na(X)] <- Z1[is.na(X)]
if(method =="Full.cond"){
xtx <- t(Z1) %*% Z2
xty <- t(Z1)%*%Y
beta.new <- solve(xtx)%*%xty
}else if (method =="Par.cond"){
beta.new <- lm(Y~.+0, data.frame(Z2))$coef
}
#     xi <- Z2[i,]
#     message('xi=', xi, '\n')
#     message('beta.new=', beta.new, '\n')
#     ngradi <- 2*(Y[i]-xi%*%beta.new)*xi
#     #print(max(abs(ngradi)))
#     if (max(abs(ngradi))< 0.1) break
#     else beta.new <- beta.new + c(rep(0.01,p/2),rep(0.03,p/2))*ngradi*(Xmat0[i,]!=0)
#   }
#   print(max(abs(2*t(Z2)%*%(Y-Z2%*%beta.new))))
# }
rss.new <- sqrt(sum((Y-Xmat0%*%beta.new)^2))
d.fn <- abs(rss.new - rss.old) / rss.old
d.par <- max(abs(beta.new-beta)) / max(abs(beta))
if(infor_output==TRUE){
message("iter=", k, ", d.fn=", format(d.fn,scientific = TRUE, digits = 4),
", d.par=", format(d.par,scientific = TRUE, digits = 4), "\n")
#message("coefs:", format(as.vector(beta.new), digits = 4),'\n')
}
beta <- beta.new
Bmat <- rbind(Bmat,matrix(beta.new, nrow=1))
rss.old <- rss.new
rss <- c(rss,rss.new)
if ((method != "SGD" & d.par < peps )| (method != "SGD" & d.fn < feps) ){
break
}
d.par
beta
dim(data)
head(data)
ilse1 <- ilse(Y~., data=dat)
head(ilse1$data)
summary(ilse1, Nbt=2)
data <- obj$data
head(data)
data1 <- data[ind, ]
disProBar(k, repTimes)
coef.par <- ilse(formula, data1, bw, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta
head(data1)
## obtain name of response variable
form <- terms(formula, data=data)
vars <- attr(form, "variables")
resp <- row.names(attr(form, "factors"))[1]
## obtain design matrix
Xmat <- model.matrix.lm(object = formula, data=data, na.action = "na.pass")
head(Xmat)
data <- obj$data
## obtain name of response variable
form <- terms(formula, data=data)
vars <- attr(form, "variables")
resp <- row.names(attr(form, "factors"))[1]
## obtain design matrix
if("(Intercept)" %in% colnames(data)) data$`(Intercept)` <- NULL
head(data)
Xmat <- model.matrix.lm(object = formula, data=data, na.action = "na.pass")
# XYdat <- model.frame(formula = formula, data = data, na.action=NULL)
XYdat <- cbind(data[[resp]], Xmat)
colnames(XYdat)[1] <- resp
ilse1 <- ilse(Y~., data=dat)
ilse1 <- ilse(Y~., data=dat)
library(ILSE)
ilse1 <- ilse(Y~., data=dat)
head(ilse1$data)
summary(ilse1, Nbt=2)
summary(ilse1, Nbt=10)
### randomly remove some entries in X
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
formula <- Y~Xmis
if(is.null(formula)) stop('formula must be given!')
if (!inherits(formula, "formula"))
stop("method is only for formula objects")
## obtain name of response variable
XYdat <- model.frame(formula = formula, na.action=NULL)
p <- ncol(XYdat[[2]])
XYdat <- as.data.frame(as.matrix(XYdat))
data <- as.data.frame(XYdat)
head(data)
formula
head(XYdat)
dim(Xmis)
head(Xmis)
### randomly remove some entries in X
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
head(Xmis)
dim(X)
head(X)
rm(list=ls())
library(ILSE)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
### randomly remove some entries in X
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
formula <- Y~Xmis
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
ilse2$beta
class(ilse2$data)
s2 <- summary(ilse2, Nbt=2)
## obtain name of response variable
XYdat <- model.frame(formula = formula, na.action=NULL)
head(XYdat)
head(XYdat)
form
vars
## obtain name of response variable
form <- terms(formula, data=data)
data <- dat
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
ilse2$beta
class(ilse2$data)
s2 <- summary(ilse2, Nbt=2)
dat <- data.frame(Y=Y, X=X)
data <- dat
## obtain name of response variable
form <- terms(formula, data=data)
form
## generate data from the current environment
XYdat <- model.frame(formula = formula, na.action=NULL)
## generate data from the current environment
data <- model.frame(formula = formula, na.action=NULL)
## obtain name of response variable
form <- terms(formula, data=data)
vars <- attr(form, "variables")
resp <- row.names(attr(form, "factors"))[1]
## obtain design matrix
if("(Intercept)" %in% colnames(data)) data$`(Intercept)` <- NULL
Xmat <- model.matrix.lm(object = formula, data=data, na.action = "na.pass")
head(Xmat)
# XYdat <- model.frame(formula = formula, data = data, na.action=NULL)
XYdat <- cbind(data[[resp]], Xmat)
colnames(XYdat)[1] <- resp
data <- as.data.frame(XYdat)
head(data)
rm(list=ls())
library(ILSE)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
ilse1 <- ilse(Y~X, data=NULL)
dat <- data.frame(Y=Y, X=X)
ilse1 <- ilse(Y~., data=dat)
head(ilse1$data)
summary(ilse1, Nbt=10)
### randomly remove some entries in X
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
#formula <- Y~Xmis
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
ilse2$beta
class(ilse2$data)
s2 <- summary(ilse2, Nbt=2)
s2
#formula <- Y~Xmis
ilse2 <- ilse(Y~Xmis+0, data=NULL, infor_output=T)
ilse2$beta
class(ilse2$data)
s2 <- summary(ilse2, Nbt=2)
s2
s2 <- summary(ilse2, Nbt=20)
library(ILSE)
s2 <- summary(ilse2, Nbt=20)
s2
# Add factor variable in data.frame ---------------------------------------
dat <- data.frame(Y=Y, X=Xmis)
ilse1 <- ilse(Y~., data=dat)
print(ilse1)
dat$Sex <- factor(rep(c('male', 'female'), times=n/2))
ilse1 <- ilse(Y~., data=dat, infor_output = T)
summary(ilse1, Nbt=10)
ilse1 <- ilse(Y~.+0, data=dat, infor_output = T)
summary(ilse1, Nbt=10)
ilse1$beta
ilse1 <- ilse(Y~., data=dat, infor_output = T)
ilse1$beta
summary(ilse1, Nbt=10)
dat$Sex[sample(1:n, n*mis_rate)] <- NA
dat$Sex
ilse1 <- ilse(Y~., data=dat, infor_output = T)
ilse1$beta
s3 <- summary(ilse1, Nbt=10)
s3
?ilse
?summary.ilse
devtools::run_examples()
n <- 4000
p <- 50
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
beta0 <- rep(c(1,-1), length=p)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
ilse1 <- ilse(Y~X, data=NULL)
ilse1
dat <- data.frame(Y=Y, X=X)
ilse1 <- ilse(Y~., data=dat)
head(ilse1$data)
summary(ilse1, Nbt=10)
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
sum(complete.cases(Xmis))
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
apply(X, 2, function(x) x[is.na(x)] <- mean(x, na.rm=TRUE))
apply(X, 2, function(x) x[is.na(x)] = mean(x, na.rm=TRUE))
X
head(X)
apply(Xmis, 2, function(x) {
x[is.na(x)] <- mean(x, na.rm=TRUE)
return(x)
})
library(ILSE)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
n <- 1000
p <- 50
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), length=p)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
ilse1 <- ilse(Y~X, data=NULL)
dat <- data.frame(Y=Y, X=X)
ilse1 <- ilse(Y~., data=dat)
head(ilse1$data)
summary(ilse1, Nbt=10)
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
lm1 <- lm(Y~Xmis)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
head(Xmis)
Xmis[1:10,] <- X[1:10,]
lm1 <- lm(Y~Xmis)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
ilse2$beta
kern.est
devtools::run_examples()
rm(list=ls())
library(ILSE)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
ilse1 <- ilse(Y~X, data=NULL)
dat <- data.frame(Y=Y, X=X)
ilse1 <- ilse(Y~., data=dat)
head(ilse1$data)
summary(ilse1, Nbt=10)
### randomly remove some entries in X
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
#formula <- Y~Xmis
ilse2 <- ilse(Y~Xmis+0, data=NULL, infor_output=T)
ilse2$beta
class(ilse2$data)
s2 <- summary(ilse2, Nbt=20)
s2
library(ILSE)
?ilse
kern
