?ilse
library(ILSE)
example(ilse)
library(ILSE)
example(ilse)
library(ILSE)
example("summary.ilse")
library(ILSE)
example(summary.film)
example(summary.fiml)
example(summary.ilse)
bootstrap
example("cor.mat")
?cor.mat
example("fimlreg")
example("dataSimulator")
library(ILSE)
example("dataSimulator")
mod2
mod1
library(ILSE)
example("dataSimulator")
mod2
mod1
sdata
example("dataSimulator")
mis.rate = 0.9
alpha <- ifelse(mis.rate==0.9, c(1.7,-20), c(1.7,07))
alpha
library(ILSE)
example("dataSimulator")
mod1
mod2
sdata <- dataSimulator(n=600, mis.method='NMAR')
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod1
?fimlreg
library(ILSE)
sdata <- dataSimulator(n=600, mis.method='NMAR')
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
library(ILSE)
sdata <- dataSimulator(n=600, mis.method='NMAR')
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod1
mod2
sdata <- dataSimulator(n=600, mis.method='NMAR', mis.rate=0.5)
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod1
mod2
summary(sdata$X.mis)
dataSimulator <- function(n=1000, mis.rate=0.9, mis.method='MCAR',err.type='normal',sigma=9){
require(MASS)
beta0 <- 3*c(-1,1,1,-1,1,-1)
# alpha0 <- 3
p <- 6
rho <- 0.5
X.full <- cbind(mvrnorm(n,rep(0, p), 3*cor.mat(p, rho, type = 'identitye')))
colnames(X.full) <- paste0('X', 1:p)
err <- switch(err.type,
normal=rnorm(n, 0, sigma),
exp = sigma*(rexp(n, 1) - 1),
mixnorm = sigma*(0.1*rnorm(n, 0, 3)+ 0.9*rnorm(n,0,1))/sqrt(0.9))
Y <- X.full %*% beta0 + err #  alpha0 + err
rsq <- var(X.full%*%beta0) / (var(X.full%*%beta0)+sigma^2)
##
# three data sources --------------------------------------------------------
# block missing specification ---------------------------------------------
if(mis.method == 'MCAR'){
# missing rate
rate <- mis.rate
Nmiss <- floor(n*rate)
set.seed(23)
missInd <- sort(sample(1:n, Nmiss) )
}else if(mis.method=='NMAR'){
set.seed(23)
alpha <- c(1.7, mis.rate*10)
if(mis.rate == 0.9){
alpha <- c(1.7, 20)
}else{
alpha <- c(1.7, 0.7)
}
prob_mis <- 1/(1+exp(-alpha[1]*err+alpha[2])) # (1.7, 0.7)->0.5 missing rate
missInd <- which(rbinom(n, 1, prob_mis)==1) #  -> 0.9
Nmiss <- length(missInd)
}
pat1 <- 3:6
pat2 <- c(1:2,5:6)
pat3 <- 1:4
pat4 <- 5:6
pat5 <- 3:4
pat6 <- 1:2
pattern <- list(pat1, pat2,pat3,pat4,pat5,pat6)
Npat <- length(pattern)
misPaInd <- sample(1:Npat, Nmiss, replace = T)
X.mis <- X.full
for(i in 1:Nmiss){
X.mis[missInd[i], pattern[[misPaInd[i]]] ]  <- NA # create missing block
}
return(list(X.mis=X.mis, Y=Y, X.full=X.full, beta0=c(beta0)))
}
sdata <- dataSimulator(n=1500, mis.method='NMAR', mis.rate=0.5)
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod1
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2
sdata <- dataSimulator(n=1500, mis.method='NMAR', mis.rate=0.9)
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod1
mod2
library(ILSE)
example("dataSimulator")
rmvnorm
?mvnorm
??mvnorm
library(ILSE)
example("dataSimulator")
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod1
summary(mod1)
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
sdata <- dataSimulator(n=600)
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
summary(mod2)
summary(mod2, Nbt = 20)
summary(mod2$data)
summary(mod2, Nbt = 4)
mod2
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis), intercept=T)
mod2
sdata
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis), intercept=T)
mod1
mod2
sdata <- dataSimulator(n=900, mis.method='MCAR', mis.rate=0.9)
mod1 <- fimlreg(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2 <- ilse(Y~., data=data.frame(Y=sdata$Y, sdata$X.mis))
mod2
mod1
summary(mod1)
library(ILSE)
example(ilse)
example("summary.ilse")
example("dataSimulator")
mod1
summary(mod1)
summary(mod2)
library(ILSE)
example("summary.fiml")
example("summary.ilse")
library(ILSE)
example("Coef")
example(cov.mat)
example("disProBar")
example("fimlreg")
example(ilse)
example(kern)
example("print.ilse")
example("print.fiml")
library(ILSE)
example("Coef")
summary(NAlm2)
NAlm2
str(NAlm2)
example("summary.ilse")
NAlm2 <- ilse(age~., data=nhanes)
NAlm2 <- ilse(age~., data=nhanes, bw=1)
summary(NAlm2)
NAlm2 <- ilse(age~., data=nhanes)
str(NAlm2)
library(ILSE)
example("summary.ilse")
print(NAlm2)
example("summary.fiml")
warnings()
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='epk', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=20,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=100,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=100,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=100,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=100,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='guassian', infor_output = T)
k.type='epk'
k.type != "guassian"
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=100,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
library(ILSE)
example(ilse)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=1e-6,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=100,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=1000,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='biweight', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='epk', infor_output = T)
library(ILSE)
NAlm2 <- ilse(age~., data=nhanes,bw=0.001,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='epk', infor_output = T)
?kern
NAlm2 <- ilse(age~., data=nhanes,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='cosine', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='triangle', infor_output = T)
library(ILSE)
library(ILSE)
library(hlep = 'ILSE')
library(help = 'ILSE')
library(ILSE)
?Coef
example("Coef")
class(NAlm2)
?cor.mat
?fimlreg
?ilse
library(ILSE)
?ilse
?kern
?nhanes
?print.fiml
?print.ilse
?summary.fiml
?summary.ilse
library(ILSE)
library(ILSE)
library(help = "ILSE")
library(ILSE)
library(ILSE)
library(ILSE)
.onAttach
library(ILSE)
library(ILSE)
library(ILSE)
library(ILSE)
library(ILSE)
?parent.frame
lm
library(ILSE)
example(ilse)
library(ILSE)
example(isle)
example(ilse)
library(ILSE)
example(ilse)
library(ILSE)
example(ilse)
library(ILSE)
example(ilse)
str(NAlm2)
lm
library(ILSE)
example(ilse)
str(NAlm3)
NAlm3[[1]]
NAlm3
library(ILSE)
example("ilse")
str(NAlm2)
library(ILSE)
?ilse
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm2
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
NAlm2
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm2
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
NAlm2
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
warnings()
gW <- function(W, p){
n <- length(W)
tmp <- matrix(0, n, p)
for(j in 1:p) tmp[,j] <- sin(W)^j
return(tmp)
}
library(ILSE)
## exmaple one: include missing value
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
NAlm2
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
library(ILSE)
example(ilse)
library(ILSE)
library(ILSE)
setwd('E:\\西财学习文件\\论文学习\\研究论文\\分块缺失论文\\模拟代码\\CLSE_simu_code\\revise_newdata')
library(ILSE)
?ilse
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
library(ILSE)
?ilse
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
Y <- nhanes$age
X <- nhanes[,-1]
if(is.null(Y) || is.null(X)) stop('"X","Y" must be given
simutaneously!')
if (is.null(n <- nrow(X)))
stop("'X' must be a matrix")
if (n == 0L)
stop("0 (non-NA) cases")
if(!is.null(bw) && !is.numeric(bw)) stop('"bw" must be NULL or a positive scalar!')
if(!is.matrix(X)) X <- as.matrix(X)
bw = 1
k.type="gaussian";impute='nonpara'; method="Full.cond"; max.iter=50;
peps=1e-5; feps = 1e-7; infor_output=T; K <- 100
if(!is.matrix(X)) X <- as.matrix(X)
if(! intercept) {X <- cbind(1,X); colnames(X)[1] <- 'intercept';}
p <- ncol(X)
i.com <- which(complete.cases(X))
Xmat0 <- X
Xmat0[is.na(X)] <- 0
Z2  <- Xmat0  # X^tilde
IDX <- indx.comp(X)
intercept <- F
if(!is.matrix(X)) X <- as.matrix(X)
if(! intercept) {X <- cbind(1,X); colnames(X)[1] <- 'intercept';}
p <- ncol(X)
i.com <- which(complete.cases(X))
Xmat0 <- X
Xmat0[is.na(X)] <- 0
Z2  <- Xmat0  # X^tilde
IDX <- indx.comp(X)
indx.comp <- function(Xmat){
p <- dim(Xmat)[2]
IDX <- NULL
for (j in 1:p){
idxj <- list(which(!is.na(Xmat[,j])))
IDX <- c(IDX,idxj)
}
IDX
}
Xmat0 <- X
Xmat0[is.na(X)] <- 0
Z2  <- Xmat0  # X^tilde
IDX <- indx.comp(X)
cc.coef <- as.numeric(lm(Y~.+0, data.frame(X), subset= i.com )$coef) # complete cases' estimate as initial estimate
if(any(is.na(cc.coef)))  cc.coef[is.na(cc.coef)] <- 1
if(is.null(bw)) bw  <- n^(-1/3)* sd(Xmat0%*%matrix(cc.coef,p,1))
bw <- ifelse(bw >1, bw, 1)
beta <- cc.coef
Bmat <- beta
rss <- rss.old <- sqrt(sum((Y-Xmat0%*%matrix(beta,p,1))^2))
k <- 0
if(infor_output==T){
cat("iter:", k, "d.fn:",NA, "d.par:", NA, "\n")
cat("par:", as.vector(round(beta,2)),'\n')
}
k <- k+1
NA_ind <- which(apply(is.na(X), 1, sum) !=0)
W <- Xmat0 %*% beta
#Z1 <- t(vapply(1:n, kern.est, FUN.VALUE=numeric(p), beta = beta, Xmat = X, Y= Y,  IDX = IDX, bw = bw, K=K, bw.type=bw.type))
#Z2[Xmat0==0] <- Z1[Xmat0==0]
Z1 <- matrix(NA, nrow(Z2), ncol(Z2))
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
kern.est
kern.est <-function(ind, beta, Xmat, Y,IDX,bw,k.type=NULL,K, bw.type){
p <- ncol(Xmat)
if (is.null(k.type)) k.type = 'biweight' #
Zi <- Xmat[ind, ] #
# Pi <- which(Xmat[ind,]!=0) #
Pi <- which(!is.na(Xmat[ind, ])) #
w <- sum(Xmat[ind,Pi]*beta[Pi])
# w <- Y[ind]-sum(Xmat[ind,Pi]*beta[Pi])
i.peer <-Reduce(intersect,IDX[Pi])
Pi.peer <- which(is.na(Xmat[ind,]))
#for (j in Pi.peer){
for (j in 1:p){
h <- bw
ij.peer <- intersect(i.peer,IDX[[j]])
# variable bandwidth
if(bw.type == 'var.bw'){# fix.bw
Xbeta <-  matrix(Xmat[ij.peer, Pi], nrow=length(ij.peer), ncol=length(Pi)) %*% matrix(beta[Pi],nrow=length(Pi), ncol=1)
Xbeta <- Xbeta[,1]
Ind.knn <- order(abs(Xbeta - w))[1:K]
h <-  (max(Xbeta[Ind.knn], na.rm = T) - min(Xbeta[Ind.knn], na.rm = T))/2
h <- max(h, min(abs(Xmat[ij.peer,Pi]%*%beta[Pi] - w))+0.01)
}
# fixed bandwidth
if(bw.type == 'fix.bw'){
Xbeta <-  matrix(Xmat[ij.peer, Pi], nrow=length(ij.peer), ncol=length(Pi)) %*% matrix(beta[Pi],nrow=length(Pi), ncol=1)
Xbeta <- Xbeta[,1]
#Xbeta <- Y[ij.peer] - Xbeta
#h <- max(h, min(abs(Xbeta - w))+0.01)
}
u <- (Xbeta - w)/h # ensure abs(u) < 1
if (sum(u<=1 & u>=-1)==0 & k.type!= 'gaussian'){
warning("Warning: the bandwidth is too small.. \n")
Zi <- NULL
return(Zi)
}
#print(sum(u<=1& u>=-1)/length(u))
u.kern <- kern(u,type=k.type)
Zi[j] <- sum(Xmat[ij.peer,j]*u.kern)/sum(u.kern)
}
return(Zi)
}
#Z2[Xmat0==0] <- Z1[Xmat0==0]
Z1 <- matrix(NA, nrow(Z2), ncol(Z2))
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
Z2[is.na(X)] <- Z1[is.na(X)]
xtx <- t(Z1) %*% Z2
xty <- t(Z1)%*%Y
beta.new <- solve(xtx)%*%xty
beta.new
t(Z1)
temp_Z1
Z1
NA_ind
NA_ind
dim(NA_ind)
i <- 1
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
temp_Z1
X
i <- 2
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
temp_Z1
is.null(temp_Z1)
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
Z1[i,]
Z1
Z1 <- matrix(NA, nrow(Z2), ncol(Z2))
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
Z1
NA_ind
X
i <- 4
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
temp_Z1
beta
X
Z1 <- X
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
Z1
Z2[is.na(X)] <- Z1[is.na(X)]
head(Z2)
head(Z1)
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm1 <- ilse(age~., data=nhanes, method = 'Full.cond')
NAlm1
library(ILSE)
?ilse
example("summary.ilse")
example("summary.fiml")
