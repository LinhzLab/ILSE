i <- 2
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
temp_Z1
is.null(temp_Z1)
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
Z1[i,]
Z1
Z1 <- matrix(NA, nrow(Z2), ncol(Z2))
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
Z1
NA_ind
X
i <- 4
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
temp_Z1
beta
X
Z1 <- X
for(i in NA_ind){
temp_Z1 <- kern.est(ind=i, beta=beta, Xmat=X, Y=Y,IDX=IDX,bw=bw,k.type=k.type,K=K, bw.type='fix.bw')
if(is.null(temp_Z1)){return(NULL)}else{
Z1[i,] <- temp_Z1
}
}
Z1
Z2[is.na(X)] <- Z1[is.na(X)]
head(Z2)
head(Z1)
library(ILSE)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Full.cond', k.type='gaussian', infor_output = T)
data(nhanes)
NAlm2 <- ilse(age~., data=nhanes,bw=1,bw.type = 'fix.bw' ,method = 'Par.cond', k.type='gaussian', infor_output = T)
NAlm1 <- ilse(age~., data=nhanes, method = 'Full.cond')
NAlm1
library(ILSE)
?ilse
example("summary.ilse")
example("summary.fiml")
library(ILSE)
library(ILSE)
library(help='ILSE')
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- X %*% beta0 + rnorm(n, sd=1)
ilse(Y~X)
?ilse
ilse(Y~X, data=NULL)
X
ilse(Y~X, data=NULL)
formula <- as.formula('Y~X')
XYdat <- model.frame(formula = formula, na.action=NULL)
head(XYdat)
str(XYdat)
XYdat <- cbind(XYdat[[1]], XYdat[[2]])
head(XYdat)
XYdat <- model.frame(formula = formula, na.action=NULL)
colnames(XYdat)
XYdat <- cbind(XYdat[[1]], XYdat[[2]])
colnames(XYdat)[2:np[2]]
np <- dim(XYdat)
XYdat <- as.matrix(XYdat)
Y <- XYdat[,1]
X <- XYdat[,-1]
n <- length(Y)
X <- matrix(X, nrow=np[1], ncol=np[2]-1)
colnames(X) <- colnames(XYdat)[2:np[2]]
colnames(XYdat)[2:np[2]]
XYdat <- model.frame(formula = formula, na.action=NULL)
XYdat <- cbind(Y=XYdat[[1]], X=XYdat[[2]])
head(XYdat)
p <- ncol(XYdat[[1]])
p <- ncol(XYdat[[1]])
p <- ncol(XYdat[[2]])
ncol(XYdat[[2]])
XYdat <- model.frame(formula = formula, na.action=NULL)
p <- ncol(XYdat[[2]])
XYdat <- cbind(XYdat[[1]], XYdat[[2]])
colnames(XYdat) <- c("Y", paste0('X', 1:p))
head(XYdat)
library(ILSE)
rm(list=ls())
library(ILSE)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- X %*% beta0 + rnorm(n, sd=1)
ilse(Y~X, data=NULL)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
ilse(Y~X, data=NULL)
ilse1 <- ilse(Y~X, data=NULL)
summary(ilse1)
repTimes=100
obj <- ilse1
data <- obj$data
data
formula <- obj$formula
bw <- obj$inargs$bw
intercept <- obj$inargs$intercept
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
if(!intercept) real_p <- ncol(data)
else real_p <- ncol(data)-1
n <- nrow(data)
cat('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
repTimes
real_p
library(ILSE)
rm(list=ls())
library(ILSE)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
ilse1 <- ilse(Y~X, data=NULL)
summary(ilse1)
ilse1 <- ilse(Y~., data=cbind(Y=Y, X=X))
dat <- as.data.frame(cbind(Y=Y, X=X))
ilse1 <- ilse(Y~., data=dat)
summary(ilse1)
ilse1
obj <- ilse1
Est <- x$beta
res <- matrix(0, nrow=length(Est), ncol=4)
x <- obj
obj$beta
Est <- x$beta
res <- matrix(0, nrow=length(Est), ncol=4)
Acov <- bootstrap(x, repTimes = Nbt)
bootstrap <- function(x, ...) UseMethod("bootstrap")
bootstrap.ilse <- function(obj,repTimes=100){
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
intercept <- obj$inargs$intercept
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
if(!intercept) real_p <- ncol(data)
else real_p <- ncol(data)-1
n <- nrow(data)
cat('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
for(k in 1:repTimes)
{
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
try(coef.par <- ilse(formula, data1, bw,  intercept, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta, silent = T)
res.par[k, ] <- coef.par
}
cat('===================Finish bootstrapping================\n')
return(cov(res.par))
}
Acov <- bootstrap(x, repTimes = Nbt)
x
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
intercept <- obj$inargs$intercept
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
if(!intercept) real_p <- ncol(data)
else real_p <- ncol(data)-1
infor_output <- F
if(!intercept){
real_p <- ncol(data)
}else{
real_p <- ncol(data)-1
}
n <- nrow(data)
cat('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
repTimes=100
res.par <- matrix(nrow=repTimes, ncol=real_p)
k <- 1
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
try(coef.par <- ilse(formula, data1, bw,  intercept, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta, silent = T)
coef.par
for(k in 1:repTimes)
{
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
try(coef.par <- ilse(formula, data1, bw,  intercept, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta, silent = T)
res.par[k, ] <- coef.par
}
k
real_p
coef.par
obj$inargs$intercept
real_p
intercept
ilse1 <- ilse(Y~., data=dat)
summary(ilse1)
intercept
data1
formula
data[ind, ]
head(data)
dat
dat <- as.data.frame(cbind(Y, X))
dat <- data.frame(Y=Y, X=X)
ilse1 <- ilse(Y~., data=dat)
summary(ilse1)
ilse1 <- ilse(Y~X, data=NULL)
summary(ilse1)
head(ilse1$data)
ilse1$beta
obj <-ilse1
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
intercept <- obj$inargs$intercept
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
if(!intercept){
real_p <- ncol(data)
}else{
real_p <- ncol(data)-1
}
intercept
n <- nrow(data)
cat('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
try(coef.par <- ilse(formula, data1, bw,  intercept, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta, silent = T)
coef.par
data1
intercept
ilse(formula, data1, bw,  intercept, k.type,K,
bw.type , method, max.iter,
peps, feps,infor_output)$beta
data1 <- data[ind, ]
library(ILSE)
ilse1 <- ilse(Y~X, data=NULL)
summary(ilse1)
obj <- ilse1
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
intercept <- obj$inargs$intercept
k.type<- obj$inargs$k.type
bw.type <- obj$inargs$bw.type
K <- obj$inargs$K
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$ feps
infor_output <- F
if(!intercept){
real_p <- ncol(data)
}else{
real_p <- ncol(data)-1
}
n <- nrow(data)
cat('===================Start bootstrapping================\n')
res.par <- matrix(nrow=repTimes, ncol=real_p)
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
disProBar(k, repTimes)
formula
library(ILSE)
ilse1 <- ilse(Y~X, data=NULL)
summary(ilse1)
ilse1 <- ilse(Y~., data=dat)
summary(ilse1)
### randomly remove some entries in X
mis_rate <- 0.3
na_id <- sample(n*p*mis_rate, 1:(n*p))
Xmis <- X
Xmis[na_id] <- NA
Xmis
n*p*mis_rate
na_id
1:(n*p)
n*p*mis_rate
sample(n*p*mis_rate, 1:(n*p))
sample(n*p*mis_rate, 1:(n*p))
sample(n*p*mis_rate, 1:(n*p))
sample(n*p*mis_rate, 1:(n*p))
?sample
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
Xmis
summary(Y~Xmis)
summary(lm(Y~Xmis))
lm1 <- lm(Y~Xmis)
summary(lm1)
lm1
summary(lm1)
lm1
str(lm1)
ilse2 <- ilse(Y~Xmis, data=NULL)
ilse2
ilse2 <- ilse(Y~Xmis, data=NULL, output=T)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output==T)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
s2 <- summary(ilse2)
s2
lm(Y~Xmis)
lm1 <- lm(Y~Xmis)
summary(lm1)
Y~Xmis
complete.cases(Xmis)
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary(lm1)
lm1
?lm
anova(lm1)
### randomly remove some entries in X
mis_rate <- 0.2
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
anova(lm1)
summary(lm1)
rm(summary)
summary.lm(lm1)
### randomly remove some entries in X
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
anova(lm1)
summary.lm(lm1)
s2 <- summary(ilse2, repTimes=20)
summary
s2 <- summary(ilse2, Nbt=20)
s2
ilse1
print(ilse1)
summary(ilse1)
s1 <- summary(ilse1)
s1
class(s1)
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
message("Number of complete cases is ", ncomp, '\n')
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
ncomp <- sum(complete.cases(Xmis))
message("Number of complete cases is ", ncomp, '\n')
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
print(ilse2)
s2 <- summary(ilse2, Nbt=20)
s2
x <- ilse2
colnames(x$data)
ilse2$beta
library(ILSE)
ilse2 <- ilse(Y~Xmis, data=NULL, infor_output=T)
s2 <- summary(ilse2, Nbt=20)
s2 <- summary(ilse2, Nbt=20)
s2
?fimlreg
library(ILSE)
fimllm <- fimlreg(Y~Xmis)
fimllm
print(fimllm)
fimllm <- fimlreg(Y~Xmis)
print(fimllm)
s_fiml <- summary(fimllm, Nbt=20)
s_fiml
s1
lm1 <- lm(Y~Xmis)
s_cc <- summary.lm(lm1)
s_cc
str(s_cc)
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s2[,4], FIML=s_fiml[,4])
pMat
p
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:p), times=3)))
df1
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5)
library(ggplot2)
library(ggplot2)
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:p), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5)
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red')
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + + geom_hline(yintercept = 0.1, color='blue')
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
library(ILSE)
s_fiml <- summary(fimllm, Nbt=20)
s_fiml
s2
coef(ilse1)
Coef(ilse1)
Fitted.values(ilse1)
Residuals(ilse1)
?ilse
data(nhanes)
nhanes
?nhanes
library("ILSE")
data("nhanes")
ncomp <- sum(complete.cases(nhanes))
message("Number of complete cases is ", ncomp, '\n')
lm1 <- lm(age~.)
lm1 <- lm(age~., data=nhanes)
s_cc <- summary.lm(lm1)
s_cc
ilse2 <- ilse(age~., data=nhanes, infor_output=T)
print(ilse2)
s2 <- summary(ilse2, Nbt=20)
s2
s_cc
fimllm <- fimlreg(age~., data=nhanes)
print(fimllm)
s_fiml <- summary(fimllm, Nbt=20)
s_fiml
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s2[,4], FIML=s_fiml[,4])
library(ggplot2)
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:3), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
s2
s2[,4]
pMat
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=3)),
covariate= factor(rep(paste0("X", 1:3), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=3)),
covariate= factor(rep(row.names(pMat[-1,]), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
#Then use pkgdown to build your website:
pkgdown::build_site()
#Then use pkgdown to build your website:
pkgdown::build_site()
?fimlreg
#Then use pkgdown to build your website:
pkgdown::build_site()
