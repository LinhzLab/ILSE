row.names(res) <- names(Est)
colnames(res) <- c('Estimate', 'std. Error', 'Z value', 'Pr(>|Z|)')
res
}
summary.fiml <- function(object, Nbt=20){
Est <- object$beta
res <- matrix(0, nrow=length(Est), ncol=4)
Acov <- bootstrap(object, repTimes = Nbt)
stdErr <- sqrt(diag(Acov))
Zvalue <- Est / stdErr
Pvalue <- 2*(1-pnorm(abs(Zvalue)))
res[,1] <- Est
res[,2] <- stdErr
res[,3] <- Zvalue
res[,4] <- Pvalue
row.names(res) <- names(Est)
colnames(res) <- c('Estimate', 'std. Error', 'Z value', 'Pr(>|Z|)')
res
}
print <- function(object) UseMethod("print")
print.ilse <- function(object) print(object[1:5])
print.fiml <- function(object) print(object[1:2])
Coef <- function(object) {
if(!is.element(class(object), c('ilse', 'fiml')))
stop('object must be class "ilse" or "fiml"!\n')
return(object$beta)
}
Fitted.values <- function(object){
if(!is.element(class(object), c('ilse')))
stop('object must be class "ilse"!\n')
return(object$fitted.values)
}
Residuals <- function(object){
if(!is.element(class(object), c('ilse')))
stop('object must be class "ilse"!\n')
return(object$residuals)
}
s_fiml <- summary(fimllm, Nbt=20)
s_fiml
beta0
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s2[,4], FIML=s_fiml[,4])
library(ggplot2)
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:p), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
library(ILSE)
?UseMethod
?lm
?lm.fit
bootstrap <- function(obj, ...) UseMethod("bootstrap")
# bootstrap.ilse <- function(obj,repTimes=100){
#   data <- obj$data
#   formula <- obj$formula
#   bw <- obj$inargs$bw
#   k.type<- obj$inargs$k.type
#   method <- obj$inargs$method
#   max.iter <- obj$inargs$max.iter
#   peps <- obj$inargs$peps
#   feps  <- obj$inargs$feps
#   arma  <- obj$inargs$arma
#   infor_output <- F
#   form <- terms(formula, data=data)
#   real_p <- ncol(data)-1
#
#
#   n <- nrow(data)
#   message('===================Start bootstrapping================\n')
#   res.par <- matrix(NA,nrow=repTimes, ncol=real_p)
#   for(k in 1:repTimes)
#   {
#     # k <- 1
#     set.seed(k)
#     ind <- sample(1:n, n, replace = T)
#     data1 <- data[ind, ]
#     disProBar(k, repTimes)
#     try(
#       {
#         coef.par <- ilse(formula, data1, bw, k.type, method, max.iter=max.iter,
#                          peps=peps, feps=feps,verbose=infor_output, arma=arma)$beta
#         res.par[k, ] <- coef.par
#       }, silent=TRUE
#     )
#
#   }
#   message('===================Finish bootstrapping================\n')
#   return(cov(res.par, na.rm=TRUE))
# }
bootstrap.ilse <- function(obj,repTimes=100){
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
k.type<- obj$inargs$k.type
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$feps
arma  <- obj$inargs$arma
infor_output <- F
form <- terms(formula, data=data)
real_p <- ncol(data)-1
n <- nrow(data)
message('===================Start bootstrapping================\n')
res.par <- pbapply::pbsapply(1: repTimes, function(k){
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
coef1 <- rep(NA, real_p)
try(
{
coef1 <- ilse(formula, data1, bw, k.type, method, max.iter=max.iter,
peps=peps, feps=feps,verbose=infor_output, arma=arma)$beta
}, silent=TRUE)
return(coef1)
})
message('===================Finish bootstrapping================\n')
return(cov(t(res.par)))
}
bootstrap.fiml <- function(obj, repTimes=100){
data <- obj$data
formula <- obj$formula
n <- nrow(data)
p <- ncol(data)
res.par <- matrix(nrow=repTimes, ncol= p)
message('===================Start bootstrapping================\n')
res.par <- pbapply::pbsapply(1: repTimes, function(k){
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
coef1 <- rep(NA, real_p)
try(
{
coef1 <- fimlreg(formula, data1)$beta
}, silent=TRUE)
return(coef1)
})
# for(k in 1:repTimes)
# {
#   set.seed(k)
#   ind <- sample(1:n, n, replace = T)
#   data1 <- data[ind, ]
#   disProBar(k, repTimes)
#   # try(coef.par <- fimlreg(formula, data1)$beta, silent = T)
#   coef.par <- fimlreg(formula, data1)$beta
#   res.par[k, ] <- coef.par
# }
message('===================Finish bootstrapping================\n')
return(cov(t(res.par)))
}
s_fiml <- summary(fimllm, Nbt=20)
bootstrap <- function(obj, ...) UseMethod("bootstrap")
# bootstrap.ilse <- function(obj,repTimes=100){
#   data <- obj$data
#   formula <- obj$formula
#   bw <- obj$inargs$bw
#   k.type<- obj$inargs$k.type
#   method <- obj$inargs$method
#   max.iter <- obj$inargs$max.iter
#   peps <- obj$inargs$peps
#   feps  <- obj$inargs$feps
#   arma  <- obj$inargs$arma
#   infor_output <- F
#   form <- terms(formula, data=data)
#   real_p <- ncol(data)-1
#
#
#   n <- nrow(data)
#   message('===================Start bootstrapping================\n')
#   res.par <- matrix(NA,nrow=repTimes, ncol=real_p)
#   for(k in 1:repTimes)
#   {
#     # k <- 1
#     set.seed(k)
#     ind <- sample(1:n, n, replace = T)
#     data1 <- data[ind, ]
#     disProBar(k, repTimes)
#     try(
#       {
#         coef.par <- ilse(formula, data1, bw, k.type, method, max.iter=max.iter,
#                          peps=peps, feps=feps,verbose=infor_output, arma=arma)$beta
#         res.par[k, ] <- coef.par
#       }, silent=TRUE
#     )
#
#   }
#   message('===================Finish bootstrapping================\n')
#   return(cov(res.par, na.rm=TRUE))
# }
bootstrap.ilse <- function(obj,repTimes=100){
data <- obj$data
formula <- obj$formula
bw <- obj$inargs$bw
k.type<- obj$inargs$k.type
method <- obj$inargs$method
max.iter <- obj$inargs$max.iter
peps <- obj$inargs$peps
feps  <- obj$inargs$feps
arma  <- obj$inargs$arma
infor_output <- F
form <- terms(formula, data=data)
real_p <- ncol(data)-1
n <- nrow(data)
message('===================Start bootstrapping================\n')
res.par <- pbapply::pbsapply(1: repTimes, function(k){
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
coef1 <- rep(NA, real_p)
try(
{
coef1 <- ilse(formula, data1, bw, k.type, method, max.iter=max.iter,
peps=peps, feps=feps,verbose=infor_output, arma=arma)$beta
}, silent=TRUE)
return(coef1)
})
message('===================Finish bootstrapping================\n')
return(cov(t(res.par)))
}
bootstrap.fiml <- function(obj, repTimes=100){
data <- obj$data
formula <- obj$formula
n <- nrow(data)
p <- ncol(data)
res.par <- matrix(nrow=repTimes, ncol= p)
message('===================Start bootstrapping================\n')
res.par <- pbapply::pbsapply(1: repTimes, function(k){
set.seed(k)
ind <- sample(1:n, n, replace = T)
data1 <- data[ind, ]
coef1 <- rep(NA, p)
try(
{
coef1 <- fimlreg(formula, data1)$beta
}, silent=TRUE)
return(coef1)
})
# for(k in 1:repTimes)
# {
#   set.seed(k)
#   ind <- sample(1:n, n, replace = T)
#   data1 <- data[ind, ]
#   disProBar(k, repTimes)
#   # try(coef.par <- fimlreg(formula, data1)$beta, silent = T)
#   coef.par <- fimlreg(formula, data1)$beta
#   res.par[k, ] <- coef.par
# }
message('===================Finish bootstrapping================\n')
return(cov(t(res.par)))
}
s_fiml <- summary(fimllm, Nbt=20)
s_fiml
library(ILSE)
devtools::run_examples()
rm(list=ls())
devtools::run_examples()
library(ILSE)
devtools::run_examples()
#Then use pkgdown to build your website:
pkgdown::build_site()
#Then use pkgdown to build your website:
pkgdown::build_site()
#Then use pkgdown to build your website:
pkgdown::build_site()
n <- 1000
p <- 50
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), length=p)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
library(ILSE)
n <- 1000
p <- 50
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), length=p)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
lm1 <- lm(Y~Xmis)
lm1
system.time(ilse2 <- ilse(Y~Xmis, data=NULL, verbose=T))
Xmis[1:10,] <- X[1:10,]
lm1 <- lm(Y~Xmis)
lm1
system.time(ilse2 <- ilse(Y~Xmis, data=NULL, verbose=T))
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
mis_rate <- 0.9
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
lm1
lm1 <- lm(Y~Xmis)
#formula <- Y~Xmis
ilse2 <- ilse(Y~Xmis+0, data=NULL, verbose=T)
ilse2 <- ilse(Y~Xmis)
ilse2 <- ilse(Y~Xmis, verbose = T)
Xmis[1:4,] <- X[1:4, ]
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
ilse2 <- ilse(Y~Xmis, verbose = T)
s2 <- summary(ilse2, Nbt=20)
s2
s2 <- summary(ilse2, Nbt=50)
s2
summary.lm(lm1)
mis_rate <- 0.8
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
Xmis[1:4,] <- X[1:4, ]
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
ilse2 <- ilse(Y~Xmis, verbose = T)
s2 <- summary(ilse2, Nbt=50)
s2
s2 <- summary(ilse2)
s2
library("ILSE")
data("nhanes")
ncomp <- sum(complete.cases(nhanes))
message("Number of complete cases is ", ncomp, '\n')
ilse2 <- ilse(age~., data=nhanes, verbose=T)
print(ilse2)
set.seed(1)
s2 <- summary(ilse2, Nbt=20)
s2 <- summary(ilse2, Nbt=20)
s2
lm1 <- lm(age~., data=nhanes)
s_cc <- summary.lm(lm1)
s_cc
fimllm <- fimlreg(age~., data=nhanes)
print(fimllm)
s_fiml <- summary(fimllm, Nbt=20)
s_fiml
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s2[,4], FIML=s_fiml[,4])
library(ggplot2)
library(ggplot2)
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=3)),
covariate= factor(rep(row.names(pMat[-1,]), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue')
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue') +
scale_fill_economist()
library(ggthemes)
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s2[,4], FIML=s_fiml[,4])
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=3)),
covariate= factor(rep(row.names(pMat[-1,]), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + geom_hline(yintercept = 0.1, color='blue') +
scale_fill_economist()
ilse2 <- ilse(Y~Xmis, k.type = 'cosine',verbose = T)
ilse2 <- ilse(Y~Xmis, k.type = 'biweight',verbose = T)
ilse2 <- ilse(Y~Xmis, k.type = 'biweight',bw=20, verbose = T)
NAlm1 <- ilse(age~., data=nhanes, method = 'Full.cond')
NAlm1
NAlm1 <- ilse(age~., data=nhanes,bw=1,
method = 'Par.cond', k.type='gaussian', verbose = TRUE)
print(NAlm1)
NAlm2 <- ilse(age~., data=nhanes, method = 'Full.cond')
print(NAlm2)
fimlreg(age~., data=nhanes)
fiml1 <- fimlreg(age~., data=nhanes)
print(fiml1)
n <- 100
group <- rnorm(n, sd=4)
weight <- 3.2*group + 1.5 + rnorm(n, sd=0.1)
fimllm <- fimlreg(weight~group, data=data.frame(weight=weight, group=group))
print(fimllm)
#Then use pkgdown to build your website:
pkgdown::build_site()
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,0), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
message("The true regression coefficients are: ", paste0(beta0, '  '))
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
dat <- data.frame(Y=Y, X=Xmis)
ilse1 <- ilse(Y~., data=dat, verbose = T)
s3 <- summary(ilse1)
s3
lm1 <- lm(Y~Xmis)
s_cc <- summary.lm(lm1)
fimllm <- fimlreg(Y~Xmis)
s_fiml <- summary(fimllm)
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s3[,4], FIML=s_fiml[,4])
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:p), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + scale_fill_economist()
set.seed(1)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,0), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
message("The true regression coefficients are: ", paste0(beta0, '  '))
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
dat <- data.frame(Y=Y, X=Xmis)
ilse1 <- ilse(Y~., data=dat, verbose = T)
s3 <- summary(ilse1)
s3 <- summary(ilse1)
s3
lm1 <- lm(Y~Xmis)
s_cc <- summary.lm(lm1)
fimllm <- fimlreg(Y~Xmis)
s_fiml <- summary(fimllm)
library(ggthemes)
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s3[,4], FIML=s_fiml[,4])
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:p), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + scale_fill_economist()
set.seed(10)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,0), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
message("The true regression coefficients are: ", paste0(beta0, '  '))
mis_rate <- 0.3
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
dat <- data.frame(Y=Y, X=Xmis)
ilse1 <- ilse(Y~., data=dat, verbose = T)
s3 <- summary(ilse1)
s3 <- summary(ilse1)
s3
lm1 <- lm(Y~Xmis)
s_cc <- summary.lm(lm1)
fimllm <- fimlreg(Y~Xmis)
s_fiml <- summary(fimllm)
library(ggthemes)
pMat <- cbind(CC=s_cc$coefficients[,4], ILSE=s3[,4], FIML=s_fiml[,4])
df1 <- data.frame(Pval= as.vector(pMat[-1,]),
Method =factor(rep(c('CC', "ILSE", "FIML"),each=p)),
covariate= factor(rep(paste0("X", 1:p), times=3)))
ggplot(data=df1, aes(x=covariate, y=Pval, fill=Method)) + geom_bar(position = "dodge", stat="identity",width = 0.5) + geom_hline(yintercept = 0.05, color='red') + scale_fill_economist()
#Then use pkgdown to build your website:
pkgdown::build_site()
ilse2 <- ilse(Y~Xmis+0, data=NULL, verbose=T)
print(ilse2)
# generate data from linear model
set.seed(1)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
# generate missing values
mis_rate <- 0.8
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
# retain 4 complete cases.
Xmis[1:4,] <- X[1:4, ]
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
ilse2 <- ilse(Y~Xmis, verbose = T)
s2 <- summary(ilse2)
s2 <- summary(ilse2)
s2
# generate data from linear model
set.seed(10)
n <- 100
p <- 6
X <- MASS::mvrnorm(n, rep(0, p), cor.mat(p, rho=0.5))
beta0 <- rep(c(1,-1), times=3)
Y <- -2+ X %*% beta0 + rnorm(n, sd=1)
# generate missing values
mis_rate <- 0.8
set.seed(1)
na_id <- sample(1:(n*p), n*p*mis_rate)
Xmis <- X
Xmis[na_id] <- NA
# retain 4 complete cases.
Xmis[1:4,] <- X[1:4, ]
sum(complete.cases(Xmis))
lm1 <- lm(Y~Xmis)
summary.lm(lm1)
ilse2 <- ilse(Y~Xmis, verbose = T)
s2 <- summary(ilse2)
s2 <- summary(ilse2)
s2
#Then use pkgdown to build your website:
pkgdown::build_site()
library(ILSE)
library(ILSE)
